{"remainingRequest":"/home/ibra/Documents/Workspace/XiinFiniin/XF/front/XFStudio/docs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/ibra/Documents/Workspace/XiinFiniin/XF/front/XFStudio/docs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/ibra/Documents/Workspace/XiinFiniin/XF/front/XFStudio/docs/node_modules/vue-loader/lib/index.js??ref--1-1!/home/ibra/Documents/Workspace/XiinFiniin/XF/front/XFStudio/docs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/ibra/Documents/Workspace/XiinFiniin/XF/front/XFStudio/docs/docs/getting-started/README.md?vue&type=template&id=091793bc&","dependencies":[{"path":"/home/ibra/Documents/Workspace/XiinFiniin/XF/front/XFStudio/docs/docs/getting-started/README.md","mtime":1607708971324},{"path":"/home/ibra/Documents/Workspace/XiinFiniin/XF/front/XFStudio/docs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ibra/Documents/Workspace/XiinFiniin/XF/front/XFStudio/docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/ibra/Documents/Workspace/XiinFiniin/XF/front/XFStudio/docs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ibra/Documents/Workspace/XiinFiniin/XF/front/XFStudio/docs/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/ibra/Documents/Workspace/XiinFiniin/XF/front/XFStudio/docs/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}